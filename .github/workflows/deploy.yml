name: Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: web-app
  ECS_CLUSTER: web-app-staging-cluster
  ECS_SERVICE: web-app-staging
  STACK_NAME: web-app
  ENVIRONMENT: staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push image to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.ENVIRONMENT }}-${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update ECS Service
      run: |
        TASK_DEF=$(aws ecs describe-task-definition \
          --task-definition web-app-staging \
          --query 'taskDefinition' \
          --output json)
        
        EXECUTION_ROLE_ARN=$(aws iam get-role \
          --role-name staging-web-app-execution-role \
          --query 'Role.Arn' \
          --output text)

        echo "Creating new task definition using image: ${{ steps.build-image.outputs.image }}"
        NEW_TASK_DEF=$(echo $TASK_DEF | jq \
          --arg IMAGE "${{ steps.build-image.outputs.image }}" \
          --arg EXEC_ROLE "$EXECUTION_ROLE_ARN" \
          '.containerDefinitions[0].image = $IMAGE | .executionRoleArn = $EXEC_ROLE')

        echo "Registering new task definition..."
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --family web-app-staging \
          --requires-compatibilities FARGATE \
          --network-mode awsvpc \
          --cpu 512 \
          --memory 1024 \
          --execution-role-arn $EXECUTION_ROLE_ARN \
          --task-role-arn $EXECUTION_ROLE_ARN \
          --container-definitions "[{
            \"name\": \"web-app\",
            \"image\": \"${{ steps.build-image.outputs.image }}\",
            \"portMappings\": [{
              \"containerPort\": 80,
              \"hostPort\": 80,
              \"protocol\": \"tcp\"
            }],
            \"essential\": true,
            \"logConfiguration\": {
              \"logDriver\": \"awslogs\",
              \"options\": {
                \"awslogs-group\": \"/ecs/web-app-staging\",
                \"awslogs-region\": \"${{ env.AWS_REGION }}\",
                \"awslogs-stream-prefix\": \"ecs\"
              }
            }
          }]" \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)

        echo "Getting current service configuration..."
        SERVICE_CONFIG=$(aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0]' \
          --output json)

        DESIRED_COUNT=$(echo $SERVICE_CONFIG | jq -r '.desiredCount')
        
        echo "Updating ECS service with desired count: $DESIRED_COUNT..."
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition $NEW_TASK_DEF_ARN \
          --desired-count $DESIRED_COUNT \
          --force-new-deployment
