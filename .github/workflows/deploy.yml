name: Build and Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Dockerfile'
      - '.github/workflows/deploy.yml'

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: web-app
  ECS_CLUSTER: staging-web-app-cluster
  ECS_SERVICE: staging-web-app
  STACK_NAME: web-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Generate image tag
      id: tag
      run: |
        echo "IMAGE_TAG=${GITHUB_RUN_NUMBER}-${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Build and push image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # Also tag as latest
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Update CloudFormation stack
      run: |
        # Create base task definition
        TASK_DEF=$(cat << EOF
        {
          "family": "staging-web-app",
          "networkMode": "awsvpc",
          "executionRoleArn": "arn:aws:iam::617692575193:role/web-app-ECSTaskExecutionRole-w7kZa8rToNWb",
          "containerDefinitions": [
            {
              "name": "web-app",
              "image": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}",
              "cpu": 0,
              "portMappings": [
                {
                  "containerPort": 80,
                  "hostPort": 80,
                  "protocol": "tcp"
                }
              ],
              "essential": true,
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/staging-web-app",
                  "awslogs-region": "ap-southeast-1",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ],
          "requiresCompatibilities": [
            "FARGATE"
          ],
          "cpu": "512",
          "memory": "1024",
          "runtimePlatform": {
            "cpuArchitecture": "ARM64",
            "operatingSystemFamily": "LINUX"
          }
        }
        EOF
        )

        # Register new task definition
        aws ecs register-task-definition \
          --cli-input-json "$TASK_DEF"

        # Update CloudFormation stack
        aws cloudformation update-stack \
          --stack-name $STACK_NAME \
          --template-body file://template.yaml \
          --parameters \
            ParameterKey=ContainerImage,ParameterValue=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} \
          --capabilities CAPABILITY_NAMED_IAM

    - name: Wait for stack update
      run: |
        aws cloudformation wait stack-update-complete \
          --stack-name $STACK_NAME

    - name: Check deployment status
      run: |
        aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].deployments'
