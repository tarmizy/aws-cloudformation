name: Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: web-app
  ECS_CLUSTER: staging-web-app-cluster
  ECS_SERVICE: staging-web-app
  STACK_NAME: web-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push image to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update ECS Service
      run: |
        echo "Creating new task definition using image: ${{ steps.build-image.outputs.image }}"
        
        # Get current task definition and clean it
        TASK_DEF=$(aws ecs describe-task-definition \
          --task-definition staging-web-app \
          --query 'taskDefinition | {
            family: family,
            taskRoleArn: taskRoleArn,
            executionRoleArn: executionRoleArn,
            networkMode: networkMode,
            containerDefinitions: containerDefinitions,
            requiresCompatibilities: requiresCompatibilities,
            cpu: cpu,
            memory: memory,
            runtimePlatform: runtimePlatform
          }' \
          --output json)

        # Update image in task definition
        NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg IMAGE "${{ steps.build-image.outputs.image }}" \
          '.containerDefinitions[0].image = $IMAGE')

        echo "New task definition:"
        echo "$NEW_TASK_DEF" | jq '.'

        # Register new task definition
        echo "Registering new task definition..."
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json "$NEW_TASK_DEF" \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)

        echo "New task definition ARN: $NEW_TASK_DEF_ARN"

        # Update service with new task definition
        echo "Updating ECS service..."
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition $(echo $NEW_TASK_DEF_ARN | cut -d/ -f2) \
          --force-new-deployment

    - name: Wait and check deployment status
      run: |
        echo "Waiting for service to be stable..."
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE

        echo "Getting deployment status..."
        aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].{status:status,runningCount:runningCount,pendingCount:pendingCount,deployments:deployments[0]}'

        # Get running tasks
        TASKS=$(aws ecs list-tasks \
          --cluster $ECS_CLUSTER \
          --service-name $ECS_SERVICE \
          --query 'taskArns[]' \
          --output text)

        if [ ! -z "$TASKS" ]; then
          echo "Checking running tasks..."
          aws ecs describe-tasks \
            --cluster $ECS_CLUSTER \
            --tasks $TASKS \
            --query 'tasks[].{taskArn:taskArn,lastStatus:lastStatus,containers:containers[].{name:name,image:image,lastStatus:lastStatus}}'
        fi
